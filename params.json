{"name":"Faux Banque","tagline":"","body":"### Faux Banque is a experimental place for learning how to use [Akka Dot Net](http://akkadotnet.github.io/) with Domain Driven Design (DDD). Along with experimenting with DDD Aggregate design it also provides an example of how to implement an [Akka Extension](http://doc.akka.io/docs/akka/snapshot/scala/extending-akka.html) to provide depenency injection using a WindsorContainer.\r\n\r\nMy IOC example is based on a translation of a Java implementation using the Spring Framework. The Java code [Spring Implementation](https://github.com/typesafehub/activator-akka-java-spring/tree/master/src/main/java/sample) is an excellent source of information if you are attempting to write your own version from scratch. If you want to use my implementation with a different container refer to the [ApplicationConfig class](https://github.com/jcwrequests/FauxBanque/blob/master/Fauux.Banque.Harness/DIExtension.cs) and create your own implementation. \r\n\r\n     public class ApplicationConfig : IApplicationContext\r\n     {\r\n        private IWindsorContainer container;\r\n        private Akka.Configuration.Config config;\r\n        \r\n        public ApplicationConfig(IWindsorContainer container)\r\n        {\r\n            this.container = container;\r\n        }\r\n\r\n        public ApplicationConfig(IWindsorContainer container, \r\n                                 Akka.Configuration.Config config)\r\n        {\r\n            this.container = container;\r\n            this.config = config;\r\n        }\r\n        public ActorSystem actorSystem(string SystemName)\r\n        {\r\n            \r\n            var system = ActorSystem.Create(SystemName,config);\r\n            system.RegisterExtension((IExtensionId)DIExtension.DIExtensionProvider);\r\n\r\n            DIExtension.DIExtensionProvider.Get(system).Initialize(this);\r\n            return system;\r\n        }                                                                                                \r\n\r\n        public Type GetType(string ActorName)\r\n        {\r\n            return \r\n                container.\r\n                Kernel.\r\n                GetAssignableHandlers(typeof(object)).\r\n                Where(handler => handler.\r\n                                 ComponentModel.\r\n                                 Name.\r\n                                 Equals(ActorName,\r\n                                        StringComparison.InvariantCultureIgnoreCase)).\r\n                Select(handler => handler.ComponentModel.Implementation).\r\n                FirstOrDefault();\r\n        }\r\n\r\n        public Func<ActorBase> CreateActor(string ActorName)\r\n        {\r\n            return () => (ActorBase)container.Resolve(GetType(ActorName));\r\n        }\r\n\r\n\r\n         \r\n    }\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}